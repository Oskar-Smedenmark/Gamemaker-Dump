<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar blockSize, chunkSize, despawnRange, spawnRange, chunkLoadedSet;

randomize();
seed = round(random_range(1000000, 10000000));

blockSize = TILE_WIDTH;

chunkSize = blockSize * 4;

despawnRange = chunkSize * room_width/276;
spawnRange = chunkSize * room_width/290;

chunkLoadedSet = ds_map_create();

spawnChunks(room_width/2, room_height/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(global.amountOfAnts &gt; 0)
{
    global.minX = 0;//obj_camera.x - room_width/2;
    global.minY = 0;//obj_camera.y - room_height/2;
    global.offsetX = 0;
    global.offsetY = 0;
    
    global.offsetX = -global.minX div TILE_WIDTH;
    global.offsetY = -global.minY div TILE_HEIGHT;
    
    spawnChunks(room_width/2, room_height/2);//obj_camera.x, obj_camera.y);
    
    //mp_grid_destroy(global.grid);
    mp_grid_clear_all(global.grid);
    global.grid = mp_grid_create((global.minX div TILE_WIDTH) * TILE_WIDTH, (global.minY div TILE_WIDTH) * TILE_WIDTH, (room_width + TILE_WIDTH) div TILE_WIDTH, (room_height + TILE_HEIGHT) div TILE_HEIGHT, TILE_WIDTH, TILE_HEIGHT);
    mp_grid_add_instances(global.grid, obj_solid, false);
    obj_world_controller.solidGrid = ds_grid_create((room_width + TILE_WIDTH) div TILE_WIDTH, (room_height + TILE_HEIGHT) div TILE_HEIGHT);
    mp_grid_to_ds_grid(global.grid, obj_world_controller.solidGrid);
    
    /*with(oChunk)
    {
        if(pointInDespawnRange(x+chunkSize/2,y+chunkSize/2))
        {
            var numSideBlocks = chunkSize div blockSize;
            for(var i = 0; i &lt; numSideBlocks; i++)
            {
                for(var j = 0; j &lt; numSideBlocks; j++)
                {
                    var block = instance_position(x + blockSize*i, y + blockSize*j, obj_solid);
                    if(block == noone)
                    {
                        block = instance_position(x + blockSize*i, y + blockSize*j, obj_water);
                    }
                    if(block != noone)
                    {
                        if(block.object_index == obj_solid)
                        {
                            mp_grid_clear_cell(global.grid, (x + blockSize*i) div TILE_WIDTH - global.offsetX, (y + blockSize*j) div TILE_HEIGHT - global.offsetY);
                            obj_world_controller.solidGrid[# (x + blockSize*i) div TILE_WIDTH, (y + blockSize*j) div TILE_HEIGHT] = 0;
                        }
                        with(block)
                        {
                            instance_destroy();
                        }
                    }
                }
            }
            ds_grid_destroy(terrainGrid);
            instance_destroy();
        }
    }*/   
    ds_map_destroy(chunkLoadedSet);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(chunkLoadedSet);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var xx = obj_camera.x;
var yy = obj_camera.y;

draw_set_colour(c_red);
draw_set_alpha(0.25);
//draw_rectangle(xx - spawnRange,yy - spawnRange, xx + spawnRange, yy + spawnRange, true);
draw_rectangle(xx - despawnRange,yy - despawnRange, xx + despawnRange, yy + despawnRange, false);
draw_set_alpha(1);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
