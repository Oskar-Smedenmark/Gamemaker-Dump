<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_worker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>obj_ant</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
//Touchable
event_inherited();

detectionRange = TILE_WIDTH * 10; //Detection range for finding enemies
attackRange = 16; //Largest range to target to attack
attackSpeed = room_speed/4; //The rate which the ant will attack
carryRange = 16;

//Untouchable

digDone = false; //Is the ant done digging
digDoneTime = 0; //Wait time after it has dug
digDoneCounter = digDoneTime; //Counter for said time


attackCounter = attackSpeed; //How often will the ant attack

readyToCarry = false; //If ant is on the object to be carried or not
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///States
switch(state)
{
    case states.idle:
        scr_idle();
    break;
    
    case states.hungry:
        scr_hungry();
    break;
    
    case states.thirsty:
        scr_thirsty();
    break;
    
    case states.dig:
        scr_dig();
    break;
    
    case states.createNest:
        scr_createNest();
    break;
    
    case states.attack:
        scr_attack();
    break;
    
    case states.collect:
        scr_collect();
    break;
    
    case states.scout:
        scr_scout();
    break;
    
    case states.alert:
        alertAnt();
    break;
    
    default:
        scr_idle();
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherited
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug drawing
event_inherited();
draw_self();
/*var strState = "";
switch(state)
{
    case states.idle:
        strState = "IDLE";
    break;
    
    case states.hungry:
        strState = "HUNGRY";
    break;
    
    case states.thirsty:
        strState = "THIRSTY";
    break;
    
    case states.dig:
        strState = "DIGGING";
    break;
    
    case states.createNest:
        strState = "NESTING";
    break;
    
    case states.attack:
        strState = "ATTACKING";
    break;
    
    case states.collect:
        strState = "COLLECTING";
        if(readyToCarry)
        {
            strState += ": READY TO CARRY";
        }
    break;
}
//draw_text(x, y - 32, "STATE: " + strState);
draw_text(x, y - 32, "HP: " + string(hp));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
