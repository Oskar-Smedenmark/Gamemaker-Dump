<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weight = 1;
antsCarrying = ds_list_create();
carried = false;
selected = false;
lerpSpd = 0.9;
minDistToFoodArea = 32;
food = 10;
inFoodPile = false;
antsCloseEnough = 0;
xTo = x;
yTo = y;
spr = sprite_index;
sprSelected = sprite_index;
mask_index = mask_food;

if(ds_list_size(obj_world_controller.foodAreas) &gt; 0)
{
    var ind = irandom(ds_list_size(obj_world_controller.foodAreas)-1);
    foodArea = ds_list_find_value(obj_world_controller.foodAreas, ind);
    foodAreaX = foodArea.x div TILE_WIDTH * TILE_WIDTH;
    foodAreaY = foodArea.y div TILE_HEIGHT * TILE_HEIGHT;
}
else
{
    foodArea = noone;
    foodAreaX = 0;
    foodAreaY = 0;
    foodAreaUpdateTime = room_speed*5;
    foodAreaUpdateCounter = foodAreaUpdateTime;
}

angle = random(360);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Give designated food area
if(foodArea == noone)
{
    foodAreaUpdateCounter--;
    if(foodAreaUpdateCounter &lt;= 0)
    {
        foodAreaUpdateCounter = foodAreaUpdateTime;
        if(ds_list_size(obj_world_controller.foodAreas) &gt; 0)
        {
            var ind = irandom(ds_list_size(obj_world_controller.foodAreas)-1);
            foodArea = ds_list_find_value(obj_world_controller.foodAreas, ind);
            foodAreaX = foodArea.x;
            foodAreaY = foodArea.y;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move object
if(instance_exists(foodArea))
{
    var canGetToFoodArea = false;
    if(distance_to_object(foodArea) &lt; minDistToFoodArea &amp;&amp; carried)
    {
        var wallInTheWay = collision_line(x+16, y+16, foodArea.x+16, foodArea.y+16, obj_solid, 0, false);
        if(wallInTheWay == noone)
        {
            canGetToFoodArea = true;
        }
    }
    if(!canGetToFoodArea)
    {
        if(!inFoodPile)
        {
            if(!ds_list_empty(antsCarrying))
            {
                selected = true;
                var xx = 0;
                var yy = 0;
                var listSize = ds_list_size(antsCarrying);
                antsCloseEnough = 0;
                for(var i = 0; i &lt; listSize; i++)
                {
                    var curAnt = antsCarrying[| i];
                    xx += curAnt.x;
                    yy += curAnt.y;
                    if(curAnt.readyToCarry == true)
                    {
                        antsCloseEnough++;
                    }
                    if(curAnt.state != states.collect)
                    {
                        ds_list_delete(antsCarrying, i);
                        i--
                        listSize--;
                    }
                }
                if(antsCloseEnough &gt;= weight)
                {
                    carried = true;
                }
                
                if(carried)
                {
                    var antToFollow = antsCarrying[| 0];
                    xTo = antToFollow.x - 16;
                    yTo = antToFollow.y - 16;
                }
                if(listSize &lt; weight)
                {
                    if(ds_list_find_index(obj_world_controller.collectOrders, id) == -1)
                    {
                        ds_list_add(obj_world_controller.collectOrders, id);
                    }
                }
            }
            else if(selected)
            {
                if(ds_list_find_index(obj_world_controller.collectOrders, id) == -1)
                {
                    ds_list_add(obj_world_controller.collectOrders, id);
                }
            }
        }
    }
    else
    {
        xTo = foodAreaX;
        yTo = foodAreaY;
        carried = false;
        selected = false;
        inFoodPile = true;
        if(ds_list_find_index(obj_world_controller.collectOrders, id) != 0)
        {
            ds_list_delete(obj_world_controller.collectOrders, ds_list_find_index(obj_world_controller.collectOrders, id));
        }
        
        if(distance_to_point(foodAreaX, foodAreaY) &lt;= 6)
        {
            x = foodAreaX;
            y = foodAreaY;
            xTo = x;
            yTo = y;
            ds_list_destroy(antsCarrying);
            inFoodPile = true;
        }
    }
}
if(xTo != x || yTo != y)
{
    x = lerp(x, xTo, 0.1 * global.gameSpeed);
    y = lerp(y, yTo, 0.1 * global.gameSpeed);
}
if(inFoodPile &amp;&amp; ds_list_find_index(obj_world_controller.eatableFood, id) == -1)
{
    ds_list_add(obj_world_controller.eatableFood, id);
}
if(inFoodPile)
{
    selected = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if empty on food
if(food &lt;= 0)
{
    ds_list_delete(obj_world_controller.eatableFood, ds_list_find_index(obj_world_controller.eatableFood, id));
    ds_list_destroy(antsCarrying);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch sprite if selected
if(selected)
{
    spr = sprSelected;
}
else
{
    spr = sprite_index;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(antsCarrying);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();
draw_sprite_ext(spr, 0, x + 16, y + 16, 1, 1, angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
