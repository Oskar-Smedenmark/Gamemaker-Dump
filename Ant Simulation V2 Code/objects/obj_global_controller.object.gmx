<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
enum states
{
    idle,
    hungry,
    thirsty,
    tired,
    dig,
    createNest,
    layEgg,
    attack,
    collect,
    scout,
    alert
}
audio_sound_gain(snd_walk, 0.1, 0);
//audio_play_sound(snd_background, 1, true);
audio_sound_gain(snd_background, 0.3, 0);


aveX = 0;
aveY = 0;
averagePosTime = room_speed * 2;
averagePosCounter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Walking sounds
averagePosCounter--;
if(averagePosCounter &lt;= 0)
{
    averagePosCounter = averagePosTime;
    var xx = ds_list_create();
    var yy = ds_list_create();
    with(obj_worker)
    {
        ds_list_add(xx, x);
        ds_list_add(yy, y);   
    }
    aveX = 0;
    for(var i = 0; i &lt; ds_list_size(xx); i++)
    {
        aveX += xx[| i];
    }
    aveX /= ds_list_size(xx);
    aveY = 0;
    for(var i = 0; i &lt; ds_list_size(xx); i++)
    {
        aveY += yy[| i];
    }
    aveY /= ds_list_size(yy);
    ds_list_destroy(xx);
    ds_list_destroy(yy);
}

var camD = 0;
with(obj_camera)
{
    camD = (point_distance(x, y, obj_global_controller.aveX, obj_global_controller.aveY) * (curZoom*25))/100;
}
audio_sound_gain(snd_walk, 1/camD, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mute music
if(keyboard_check_pressed(ord('M')))
{
    audio_sound_gain(snd_background, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
