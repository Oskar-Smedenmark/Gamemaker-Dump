<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_solid</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
//Grid for solids, for finding the closest open block around a solid
solidGrid = ds_grid_create((room_width + TILE_WIDTH) div TILE_WIDTH, (room_height + TILE_HEIGHT) div TILE_HEIGHT);
mp_grid_to_ds_grid(global.grid, solidGrid);

antsPerNestArea = 4; //1 nest area for every x ants forr the idle to kick in

//Not really used
enum blocks
{
    outworld,
    wall,
    nest
}

global.amountOfAnts = 0; //Amount of ants currently alive
aliveAnts = ds_list_create();

nestAreas = ds_list_create();   //All nest areas
foodAreas = ds_list_create();   //All food areas
guardAreas = ds_list_create();  //All guard areas
drinkingWater = ds_list_create(); //Water that can be reached
eatableFood = ds_list_create(); //Food that can be reached
digOrders = ds_list_create();  //Dig orders to carry out(should rename this)
nestOrders = ds_list_create();  //Orders to create nest to carry out
collectOrders = ds_list_create(); //Collect orders to carry out

//Outdated because the room isn't populated with nest areas from the start
//Adds all the nest areas in the room to the list
for(var i = 0; i &lt; room_width; i+=32)
{
    for(var j = 0; j &lt; room_height; j+=32)
    {
        if(position_meeting(i, j, obj_nest_area))
        {
            ds_list_add(nestAreas, instance_place(i, j, obj_nest_area));
        }
        if(position_meeting(i, j, obj_food_area))
        {
            ds_list_add(foodAreas, instance_place(i, j, obj_food_area));
        }
    }
}

clickX = mouse_x;
clickY = mouse_y;

//Create particle system
instance_create(x, y, obj_ps);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug spawning
//Spawns x amount of ants
if(keyboard_check_pressed(ord('9')) &amp;&amp; instance_exists(obj_queen) &amp;&amp; !scr_hitBlock(mouse_x,mouse_y))
{
    for(var i = 0; i &lt; 2; i++)
    {
        instance_create(mouse_x, mouse_y, obj_bug);
        //instance_create(mouse_x + irandom(100), mouse_y, obj_test_food);
    }
}
if(mouse_check_button_pressed(mb_right) &amp;&amp; !instance_exists(obj_queen) &amp;&amp; !scr_hitBlock(mouse_x,mouse_y))
{
    for(var i = 0; i &lt; 1; i++)
    {
        instance_create(mouse_x, mouse_y, obj_queen);
    }
    for(var i = 0; i &lt; 10; i++)
    {
        instance_create(mouse_x, mouse_y, obj_worker);
        global.amountOfAnts++;
    }
}
if(keyboard_check_pressed(vk_space))
{
    for(var i = 0; i &lt; 100; i++)
    {
        var ant = instance_create(mouse_x, mouse_y, obj_worker);
        if(i % 10 == 0)
        {
            ant.isScout = true;
        }
        global.amountOfAnts++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Orders
if(mouse_check_button_pressed(mb_left))
{
    clickX = mouse_x;
    clickY = mouse_y;
}
if(mouse_check_button_released(mb_left))
{
    var x1,y1,x2,y2;
    x1 = alignToGrid(min(clickX, mouse_x));
    y1 = alignToGrid(min(clickY, mouse_y));
    x2 = alignToGrid(max(clickX, mouse_x)) + TILE_WIDTH - 1;
    y2 = alignToGrid(max(clickY, mouse_y)) + TILE_WIDTH - 1;
    if(x1 == x2 &amp;&amp; y1 == y2)
    {
        x2 += 1;
        y2 += 1;
    }
    var item = obj_selection_wheel.items[obj_selection_wheel.selected];
    if(item == noone)
    {
        for(var i = x1; i &lt; x2; i +=TILE_WIDTH)
        {
            for(var j = y1; j &lt; y2; j += TILE_HEIGHT)
            {
                if(!scr_hitBlock(i,j) &amp;&amp; ds_list_find_index(nestOrders, instance_position(i, j, obj_nest_target)) == -1)
                {
                    var tar = instance_create(i div TILE_WIDTH * TILE_WIDTH, j div TILE_HEIGHT * TILE_HEIGHT, obj_nest_target);
            
                    ds_list_add(nestOrders, tar);
                }
            }
        }
    }
    else
    {
        var items = scr_object_inside_area(x1, y1, x2, y2, item);
        //If a solid block exists within the area
        for(var i = 0; i &lt; ds_list_size(items); i++)
        {
            var curItem = items[| i];
            //Add this item to the correct orders
            switch(obj_selection_wheel.selected)
            {
                case orders.dig:
                    if(ds_list_find_index(digOrders, curItem) == -1)
                    {
                        ds_list_add(digOrders, curItem);
                    }
                break;
                
                case orders.collect:
                    if(!curItem.inFoodPile &amp;&amp; !curItem.carried)
                    {
                        if(ds_list_find_index(collectOrders, curItem) == -1)
                        {
                            ds_list_add(collectOrders, curItem);
                        }
                    }
                break;
                
                case orders.foodArea:
                    ds_list_add(foodAreas, instance_create(curItem.x, curItem.y, obj_food_area));
                break;
                
            }
            with(curItem)
            {
                selected = true;
            }
        }
        ds_list_destroy(items);
    }
}   
giveDigOrders();
giveNestOrders();
giveCollectOrders();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delta timing
var expected_delta_time = 1 / 60 * 1000000; //In microseconds
var delta = expected_delta_time / delta_time; //Turn this into a ratio
global.gameSpeed = delta;
if(delta &gt; 1)
{
    global.gameSpeed = 1;
}
if(keyboard_check(ord('f')))
{
    global.gameSpeed = 3;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy ds
//List
ds_list_destroy(aliveAnts);
ds_list_destroy(nestAreas);
ds_list_destroy(digOrders);
ds_list_destroy(guardAreas);
ds_list_destroy(foodAreas);
ds_list_destroy(nestOrders);
ds_list_destroy(drinkingWater);
ds_list_destroy(eatableFood);
ds_list_destroy(collectOrders);
//Grid
ds_grid_destroy(solidGrid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw debug text
draw_set_colour(c_white);
draw_text(50, 50, "FPS: " + string(fps_real));
draw_text(50, 100, "Ants: " + string(instance_number(obj_ant)));
draw_text(50, 150, "Offset X: " + string(global.offsetX));
draw_text(50, 200, "Offset Y: " + string(global.offsetY));

if(ds_list_size(aliveAnts) &gt; 0)
{
    var avgHun = 0;
    var totHun = 0;
    var avgThr = 0;
    var totThr = 0;
    for(var i = 0; i &lt; ds_list_size(aliveAnts); i++)
    {
        var curAnt = aliveAnts[| i];
        if(instance_exists(curAnt))
        {
            totHun += curAnt.hunger;
            totThr += curAnt.thirst;
        }
        
    }
    avgHun = totHun/ds_list_size(aliveAnts);
    avgThr = totThr/ds_list_size(aliveAnts);
    draw_text(50, 350, "Average hunger: " + string(avgHun));
    draw_text(50, 400, "Average thirst: " + string(avgThr));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_check_button(mb_left))
{
    var x1,y1,x2,y2;
    x1 = alignToGrid(min(clickX, mouse_x));
    y1 = alignToGrid(min(clickY, mouse_y));
    x2 = alignToGrid(max(clickX, mouse_x)) + TILE_WIDTH;
    y2 = alignToGrid(max(clickY, mouse_y)) + TILE_WIDTH;
    
    draw_set_colour(c_red);
    draw_set_alpha(0.25);
    draw_rectangle(x1, y1, x2, y2, false);
    draw_set_alpha(1);
    draw_set_colour(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart game
game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
