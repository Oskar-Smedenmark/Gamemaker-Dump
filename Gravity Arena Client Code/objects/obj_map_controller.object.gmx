<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create map

//Create 2 for loops so you can add a tile for every 32 pixels of room you have
for(i=0; i&lt;(room_width/32);i++){
    for(ii=0; ii&lt;(room_height/32);ii++){
        //Pick a random number from the 0 to one minus the amount of tiles you have
        iii=irandom_range(0,5)
        //Add the random selected tile to the selected area
        tile_add(bg_space,0+(iii*32),0,32,32,i*32,ii*32, 100000)
    }
}

//Create outlineborder for saftey reasons
for(var i = 0; i &lt; room_width; i+=32)
{
    instance_create(i, 0, obj_solid);
    instance_create(i, room_height-32, obj_solid);
}
for(var i = 0; i &lt; room_height; i+=32)
{
    instance_create(0, i, obj_solid);
    instance_create(room_width-32, i, obj_solid);
}

if(file_exists(working_directory + "\" + global.map))
{
    var arena = file_text_open_read(working_directory + "\" + global.map);
    var line = "";
    var currPos = 1;
    var eow = false;
    var currWord = "";
    var currX = 0;
    var i = 0;
    //for(var i = 0; i &lt; 100; i++)
    while(!file_text_eof(arena))
    {
        currPos = 1;
        currX = 0;
        line = file_text_read_string(arena);
        while(currPos != string_length(line))
        {
            eow = false;
            currWord = "";
            while(!eow)
            {
                if(string_char_at(line, currPos) == ",")
                {
                    eow = true;
                }
                else
                {
                    currWord += string_char_at(line, currPos);
                }
                currPos++;
            }
            switch(currWord)
            {
                case "0":
                    if(instance_place(32 * currX, 32 * i, obj_solid) == noone)
                    {
                        instance_create(32 * currX, 32 * i, obj_solid);
                    }
                break;
                case "1":
                    instance_create(32 * currX, 32 * i, obj_spawn_red);
                break;
                case "2":
                    instance_create(32 * currX, 32 * i, obj_spawn_blue);
                break;
                case "3":
                    instance_create(32 * currX, 32 * i, obj_checkpoint);
                break;
                case "4":
                    instance_create(32 * currX, 32 * i, obj_finish);
                break;
                case "5":
                    instance_create(32 * currX, 32 * (i - 1), obj_black_hole);
                break;
                case "6":
                    instance_create(32 * currX, 32 * i, obj_spawn_point);
                break;
                case "7":
                    instance_create(32 * currX, 32 * i, obj_speed_booster);
                break;
            }
            currX++;
        }
        file_text_readln(arena);
        i++;
    }
    file_text_close(arena);
}
with(obj_solid)
{
    //Free up, down, left, right
    var fUp = !position_meeting( x + 16, y + 16 - 32, obj_solid );
    var fDown = !position_meeting( x + 16, y + 16 + 32, obj_solid );
    var fLeft = !position_meeting( x + 16 - 32, y + 16, obj_solid );
    var fRight = !position_meeting( x + 16 + 32, y + 16, obj_solid );
    //up, left up, right up
    if(fUp)
    {
        if(fLeft)
        {
            sprite_index = spr_solid_end;
            image_index = 0;
        }
        else if(fRight)
        {
            sprite_index = spr_solid_end;
            image_index = 2;
        }
        else
        {
            sprite_index = spr_solid_end;
            image_index = 1;
        }
    }
    else if (fDown) 
    {
        if(fLeft)
        {
            sprite_index = spr_solid_end;
            image_index = 5;
        }
        else if(fRight)
        {
            sprite_index = spr_solid_end;
            image_index = 7;
        }
        else
        {
            sprite_index = spr_solid_end;
            image_index = 6;
        }
    }
    else if (fLeft) 
    {
        sprite_index = spr_solid_end;
        image_index = 3;
    }
    else if(fRight)
    {
        sprite_index = spr_solid_end;
        image_index = 4;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables and character creation
spawnTime = 60 * 3;
spawnCounter = spawnTime;

gameStartTime = 60 * 3.99;
gameStartCounter = gameStartTime;

global.lastHitBy = noone;

//Race
checkpoint = false;
spawnPoint = noone;

//Create our player randomly in the room
var xx, yy;
if(global.team == "Blue")
{
    with(instance_find(obj_spawn_blue, irandom(instance_number(obj_spawn_blue) - 1)))
    {
        xx = x + 16;
        yy = y + 16;
    }
}
else if(global.team == "Red")
{
    with(instance_find(obj_spawn_red, irandom(instance_number(obj_spawn_red) - 1)))
    {
        xx = x + 16;
        yy = y + 16;
    }
}
else
{
    xx = random(room_width - 60) + 42;
    yy = random(room_height - 60) + 42;
}

if(global.gamemode == "race")
{
    with(instance_find(obj_finish, irandom(instance_number(obj_finish) - 1)))
    {
        xx = x + 16;
        yy = y + 16;
    }
}
var okPlace = false;

with(instance_create(xx, yy, obj_local_player))
{
    while(!okPlace)
    {
        if(!place_meeting(xx, yy, obj_solid))
        {
            okPlace = true;
            x = xx;
            y = yy;
        }
        if(global.team == "Blue")
        {
            with(instance_find(obj_spawn_blue, irandom(instance_number(obj_spawn_blue) - 1)))
            {
                xx = x + 16;
                yy = y + 16;
            }
        }
        else if(global.team == "Red")
        {
            with(instance_find(obj_spawn_red, irandom(instance_number(obj_spawn_red) - 1)))
            {
                xx = x + 16;
                yy = y + 16;
            }
        }   
        else
        {
            xx = random(room_width - 60) + 42;
            yy = random(room_height - 60) + 42;
        }
        
        if(global.gamemode == "race")
        {
            with(instance_find(obj_finish, irandom(instance_number(obj_finish) - 1)))
            {
                xx = x + 16;
                yy = y + 16;
            }
        }
    }
}

buffer_seek(global.buffer, buffer_seek_start, 0);
buffer_write(global.buffer, buffer_u8, type.playerCreateErase);
buffer_write(global.buffer, buffer_u32, global.playerId);
buffer_write(global.buffer, buffer_string, global.character);
network_send_packet(obj_controller.socket, global.buffer, buffer_tell(global.buffer));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn
if(!instance_exists(obj_local_player))
{
    spawnCounter -= 1 * global.gameSpeed;
    if(spawnCounter &lt;= 0)
    {
        spawnCounter = spawnTime;
        //Create our player randomly in the room
        var xx, yy;
        if(global.team == "Blue")
        {
            with(instance_find(obj_spawn_blue, irandom(instance_number(obj_spawn_blue) - 1)))
            {
                xx = x + 16;
                yy = y + 16;
            }
        }
        else if(global.team == "Red")
        {
            with(instance_find(obj_spawn_red, irandom(instance_number(obj_spawn_red) - 1)))
            {
                xx = x + 16;
                yy = y + 16;
            }
        }
        else
        {
            xx = random(room_width - 60) + 42;
            yy = random(room_height - 60) + 42;
        }
        if(global.gamemode == "race")
        {
            /*if(checkpoint == false)
            {
                with(instance_find(obj_finish, irandom(instance_number(obj_finish) - 1)))
                {
                    xx = x + 16;
                    yy = y + 16;
                }
            }
            else
            {
                with(instance_find(obj_checkpoint, irandom(instance_number(obj_checkpoint) - 1)))
                {
                    xx = x + 16;
                    yy = y + 16;
                }
            }*/
            with(spawnPoint)
            {
                xx = x + 16;
                yy = y + 16;
            }
        }
        var okPlace = false;
        
        with(instance_create(xx, yy, obj_local_player))
        {
            while(!okPlace)
            {
                if(!place_meeting(xx, yy, obj_solid))
                {
                    okPlace = true;
                    x = xx;
                    y = yy;
                }
                if(global.team == "Blue")
                {
                    with(instance_find(obj_spawn_blue, irandom(instance_number(obj_spawn_blue) - 1)))
                    {
                        xx = x + 16;
                        yy = y + 16;
                    }
                }
                else if(global.team == "Red")
                {
                    with(instance_find(obj_spawn_red, irandom(instance_number(obj_spawn_red) - 1)))
                    {
                        xx = x + 16;
                        yy = y + 16;
                    }
                }   
                else
                {
                    xx = random(room_width - 60) + 42;
                    yy = random(room_height - 60) + 42;
                }
                
                if(global.gamemode == "race")
                {
                    if(obj_map_controller.checkpoint == false)
                    {
                        with(instance_find(obj_finish, irandom(instance_number(obj_finish) - 1)))
                        {
                            xx = x + 16;
                            yy = y + 16;
                        }
                    }
                    else
                    {
                        with(instance_find(obj_checkpoint, irandom(instance_number(obj_checkpoint) - 1)))
                        {
                            xx = x + 16;
                            yy = y + 16;
                        }
                    }
                }
            }
        }
        
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, type.spawn);
        buffer_write(global.buffer, buffer_u32, global.playerId);
        network_send_packet(obj_controller.socket, global.buffer, buffer_tell(global.buffer));
        
        audio_play_sound(snd_spawn, 1, 0);
    }
}
else
{
    with(obj_local_player)
    {
        if(instance_exists(obj_spawn_point))
        {
            var closestSpawn = instance_nearest(x, y, obj_spawn_point);
            var wallInBetween = collision_line(x, y, closestSpawn.x, closestSpawn.y, obj_solid, 0, 1);
            if(wallInBetween == noone)
            {
                obj_map_controller.spawnPoint = closestSpawn.id;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Count down
if(global.gameCountDown &lt;= 0)
{
    global.gameStarted = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///See stats
if(keyboard_check(vk_tab))
{
    if(instance_exists(obj_minimap))
    {
        with(obj_minimap)
        {
            instance_destroy();
        }
    }
    if(!instance_exists(obj_player_list))
    {
        instance_create(x, y, obj_player_list);
    }
}
else
{
    if(instance_exists(obj_player_list))
    {
        with(obj_player_list)
        {
            instance_destroy();
        }
    }
    if(!instance_exists(obj_minimap))
    {
        instance_create(x, y, obj_minimap);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_big);
draw_set_colour(c_green);
draw_set_halign(fa_center);
var windowWidth = window_get_width();
var windowHeight = window_get_height();
if(global.gameStarted == false)
{
    draw_text(windowWidth/2, windowHeight/2, string(floor(global.gameCountDown/60)));
}
if(global.endGame)
{
    switch(global.gamemode)
    {
        case "td":
            draw_text(windowWidth/2, windowHeight/2, "The " + global.winner + " just won the game!");
        break;
        
        case "ffa":
            draw_text(windowWidth/2, windowHeight/2, global.winner + " just won the game!");
        break;
        
        case "race":
            draw_text(windowWidth/2, windowHeight/2, global.winner + " just won the race!");
        break;
    }
}


switch(global.gamemode)
{        
    case "race":
        draw_text(windowWidth/2, 30, "Lap: " + string(global.lap));
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Leave the game world
buffer_seek(global.buffer, buffer_seek_start, 0);
buffer_write(global.buffer, buffer_u8, type.playerCreateErase);
buffer_write(global.buffer, buffer_u32, global.playerId);
buffer_write(global.buffer, buffer_u32, 0);
network_send_packet(obj_controller.socket, global.buffer, buffer_tell(global.buffer));

switch(global.gamemode)
{
    case "td":
        room_goto(rm_lobby_team_deathmatch);
    break;
    
    case "ffa":
        room_goto(rm_lobby_free_for_all);
    break;
    
    case "race":
        room_goto(rm_lobby_free_for_all);
    break;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
