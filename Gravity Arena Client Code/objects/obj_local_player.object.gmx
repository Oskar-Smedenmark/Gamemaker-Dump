<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_blue</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiation
scr_player_init();
if(global.gamemode == "ffa")
{
    instance_create(x, y, obj_marker);
}
instance_create(x, y, obj_minimap);
image_xscale = 1;
image_speed = 0.17;

instance_create(x, y, obj_arm);
if(!instance_exists(obj_camera))
{
    instance_create(x, y, obj_camera);
}

switch(global.character)
{
    case "assault":
        sprite_index = spr_player_blue;//Placeholder
    break;
    
    case "sniper":
        sprite_index = spr_sniper;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send Position to server
buffer_seek(global.buffer, buffer_seek_start, 0);
buffer_write(global.buffer, buffer_u8, type.posInitiation);
buffer_write(global.buffer, buffer_u32, global.playerId);
buffer_write(global.buffer, buffer_f32, x);
buffer_write(global.buffer, buffer_f32, y);
network_send_packet(obj_controller.socket, global.buffer, buffer_tell(global.buffer));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Condition check
if(global.gameStarted == true)
{
    if(hp &lt;= 0)
    {
        global.deaths++;
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, type.dead);
        buffer_write(global.buffer, buffer_u32, global.playerId);
        buffer_write(global.buffer, buffer_u32, global.lastHitBy);
        network_send_packet(obj_controller.socket, global.buffer, buffer_tell(global.buffer));
        instance_destroy();
        var killer = noone;
        
        with(obj_remote_player)
        {
            if(remotePlayerId == global.lastHitBy)
            {
                killer = id;
            }
        }
        global.lastHitBy = noone;
        if(killer != noone)
        {
            scr_create_message("You were killed by " + killer.remotePlayerName + "!!!");
        }
        else
        {
            var randomMessage = irandom(3);
            var message = "";
            switch(randomMessage)
            {
                case 0:
                    message = "Look at this guy... Killing himself?";
                break;
                case 1:
                    message = "You were killed by yourself, what are you? A lunatic?";
                break;
                case 2:
                    message = "You were killed by yourself. Really now?";
                break;
                case 3:
                    message = "Wow, good job killing yourself there...";
                break;
            }
            scr_create_message(message);
        }
        audio_play_sound(snd_dead, 1, 0);
        with(obj_marker)
        {
            instance_destroy();
        }
        with(obj_minimap)
        {
            instance_destroy();
        }
    }
    
    if(stunned)
    {
        stunnedCounter -= 1 * global.gameSpeed;
        if(stunnedCounter &lt;= 0)
        {
            stunned = false;
        }
    }
    
    if(place_meeting(x, y, obj_checkpoint))
    {
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, type.onCheckpoint);
        buffer_write(global.buffer, buffer_u32, global.playerId);
        network_send_packet(obj_controller.socket, global.buffer, buffer_tell(global.buffer));
    }
    
    if(place_meeting(x, y, obj_finish))
    {
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, type.onFinish);
        buffer_write(global.buffer, buffer_u32, global.playerId);
        network_send_packet(obj_controller.socket, global.buffer, buffer_tell(global.buffer));
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack direction change
if(global.gameStarted == true &amp;&amp; !global.typing)
{
    var up = keyboard_check(ord('1'));
    var down = keyboard_check(ord('2'));
    var left = keyboard_check(ord('3'));
    var right = keyboard_check(ord('4'));
    
    if(up)
    {
        atkDirection = 90;
    }
    if(down)
    {
        atkDirection = 270;
    }
    if(left)
    {
        atkDirection = 180;
    }
    if(right)
    {
        atkDirection = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if(global.gameStarted == true)
{
    var up = keyboard_check(ord('W')) || keyboard_check(vk_up);
    var down = keyboard_check(ord('S')) || keyboard_check(vk_down);
    var left = keyboard_check(ord('A')) || keyboard_check(vk_left);
    var right = keyboard_check(ord('D')) || keyboard_check(vk_right);
        
    if(global.typing)
    {
        up = false;
        down = false;
        left = false;
        right = false;
    }
    else
    {
        if(keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_rshift))
        {
            speedLimiter = !speedLimiter;
        }
    }

    scr_movement(up, down, left, right);
        
    
    angle = obj_arm.image_angle;
    
    if(mouse_x &lt; x)
    {
        image_xscale = -1;
    }
    else
    {
        image_xscale = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting
if(global.gameStarted == true &amp;&amp; !global.weaponsDisabled &amp;&amp; !global.typing)
{
    var spawnCamp = true;
    //standing in a spawn
    if(!place_meeting(x, y, obj_spawn_blue) &amp;&amp; !place_meeting(x, y, obj_spawn_red))
    {
        spawnCamp = false;
    }
    if(mouse_check_button(mb_left) &amp;&amp; !stunned &amp;&amp; !spawnCamp)
    {
        shooting = true;
        var dir = point_direction(x, y, mouse_x, mouse_y);
        var opDir = point_direction(mouse_x, mouse_y, x, y);
        if(shotCounter &lt;= 0)
        {
            scr_add_motion(opDir, recoil);
            scr_screenshake(2, 0.8);
            shotCounter = shotDelay;
            var bullet = instance_create(obj_arm.x + lengthdir_x(bulletPadding, dir), obj_arm.y + lengthdir_y(bulletPadding, dir), obj_local_bullet);
            bullet.dir = dir;
            bullet.spd = bulletSpd + sqrt(power(hspd, 2) + power(vspd, 2));
            bullet.atkDir = atkDirection;
            bullet.image_angle = dir;
            buffer_seek(global.buffer, buffer_seek_start, 0);
            buffer_write(global.buffer, buffer_u8, type.shooting);
            buffer_write(global.buffer, buffer_u32, global.playerId);
            buffer_write(global.buffer, buffer_f32, dir);
            buffer_write(global.buffer, buffer_f32, bullet.spd);
            network_send_packet(obj_controller.socket, global.buffer, buffer_tell(global.buffer));
            
            audio_sound_pitch(snd_shot, random_range(1, 2));
            audio_play_sound(snd_shot, 1, 0);
        }
    }
    else
    {
        shooting = false;
    }
    shotCounter -= 1 * global.gameSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if next lap in race
if(place_meeting(x, y, obj_finish) &amp;&amp; obj_map_controller.checkpoint == true)
{
    obj_map_controller.checkpoint = false;
    global.lap++;
}
if(place_meeting(x, y, obj_checkpoint) &amp;&amp; obj_map_controller.checkpoint == false)
{
    obj_map_controller.checkpoint = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*global.deaths++;
buffer_seek(global.buffer, buffer_seek_start, 0);
buffer_write(global.buffer, buffer_u8, type.dead);
buffer_write(global.buffer, buffer_u32, global.playerId);
buffer_write(global.buffer, buffer_u32, global.lastHitBy);
network_send_packet(obj_controller.socket, global.buffer, buffer_tell(global.buffer));
instance_destroy();

var killer = noone;

with(obj_remote_player)
{
    if(remotePlayerId == global.lastHitBy)
    {
        killer = id;
    }
}

if(killer != noone)
{
    scr_create_message("You were killed by " + killer.remotePlayerName + "!!!");
}
global.lastHitBy = noone;
audio_play_sound(snd_dead, 1, 0);
with(obj_marker)
{
    instance_destroy();
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.team == "Red")
{
    draw_set_colour(c_red);
}
else if(global.team == "Blue")
{
    draw_set_colour(c_blue);
}
else
{
    draw_set_colour(c_green);
}
//draw_sprite_ext(sprite_index, image_number, x, y, image_xscale, 1, 0, c_white, 1);
draw_self();
//draw_circle(x, y, 15, true);
draw_set_font(fnt_main);
draw_set_halign(fa_center);
draw_text(x, y - 35, "Health: " + string(hp));
draw_set_halign(fa_left);
switch(atkDirection)
{
    case 0:
        draw_text(x + 35, y, "Bullet: Right");
    break;
    
    case 90:
        draw_text(x + 35, y, "Bullet: Up");
    break;
    
    case 180:
        draw_text(x + 35, y, "Bullet: Left");
    break;
    
    case 270:
        draw_text(x + 35, y, "Bullet: Down");
    break;
}

if(speedLimiter)
{
    draw_text(x, y + 35, "Limiter: On");
}
else
{
    draw_text(x, y + 35, "Limiter: Off");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
