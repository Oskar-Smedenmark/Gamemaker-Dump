<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_local_bullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd = 10;
impulse = 10;
dir = 0;
atkDir = 270;
started = false;
hspd = 0;
vspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move
image_angle = point_direction(x, y, x + hspd, y + vspd);
if(!started)
{
    started = true;
    scr_add_motion(dir, spd);
}
scr_hor_collision(obj_solid, hspd * global.gameSpeed);
if(hspd == 0)
{
    scr_destroy_bullet();
    audio_sound_pitch(snd_other_hit, random_range(1, 4));
    audio_play_sound(snd_other_hit, 1, 0);
}
x += hspd * global.gameSpeed;
scr_ver_collision(obj_solid, vspd * global.gameSpeed);
if(vspd == 0)
{
    scr_destroy_bullet();
    audio_sound_pitch(snd_other_hit, random_range(1, 4));
    audio_play_sound(snd_other_hit, 1, 0);
}
y += vspd * global.gameSpeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if collision with player or wall

if(place_meeting(x, y, obj_spawn_blue) || place_meeting(x, y, obj_spawn_red))
{
    scr_destroy_bullet();
}
if(distance_to_object(obj_remote_player) &lt; 100)
{
    var playerHit = noone;
    var hit = false;
    horhit = scr_hor_collision(obj_remote_player, hspd);
    verhit = scr_ver_collision(obj_remote_player, vspd);
    if(horhit || verhit)
    {
        playerHit = instance_nearest(x, y, obj_remote_player);
    }
    
    if(playerHit != noone)
    {
        audio_sound_pitch(snd_other_hit, random_range(1, 4));
        audio_play_sound(snd_other_hit, 1, 0);
        
        scr_destroy_bullet();
        
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, type.hit);
        buffer_write(global.buffer, buffer_u32, playerHit.remotePlayerId);
        buffer_write(global.buffer, buffer_u32, global.playerId);
        buffer_write(global.buffer, buffer_f32, dir);
        buffer_write(global.buffer, buffer_f32, impulse + (spd - 10));
        buffer_write(global.buffer, buffer_f32, atkDir);
        network_send_packet(obj_controller.socket, global.buffer, buffer_tell(global.buffer)); 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
