<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
randomize();
socket = network_create_socket(network_socket_tcp);
network_set_config(network_config_connect_timeout,4000)
//ip = "83.249.136.133";
isConnected = network_connect(socket, global.ip, 46887);
global.buffer = buffer_create(1024, buffer_fixed, 1);
global.latency = 0;
global.minimumPlayers = 2;
global.gameStarted = false;
global.endGame = false;
global.shownWinner = false;
endCounter = 60 * 10;

statsTime = 60 * 5;
statsCounter = 0;
global.kills = 0;
global.deaths = 0;

scr_create_message("Client initialized");

enum type
{
    ping,
    join,
    connect,
    disconnect,
    playerCreateErase,
    playerOrientation,
    shooting,
    hit,
    dead,
    spawn,
    stats,
    winner,
    spawnProtection,
    finishGame,
    lobbyList,
    changeTeam,
    onFinish,
    onCheckpoint,
    disableEnableWeapons,
    startTimer,
    posInitiation,
    playerPosUpdate,
    playerCreate,
    message
}

audio_master_gain(0.3);
if(!audio_is_playing(snd_background))
{
   audio_play_sound(snd_background, 1, 1);
}
if(isConnected &lt; 0)
{
    network_destroy(socket);
    buffer_delete(global.buffer);
    instance_destroy();
    room_goto(rm_main_menu);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Other
startBeepPitch = 1;

//Chat
global.typing = false;
maxWidth = 150;
blink = false;
blinkCounter = room_speed * 1;
text = "";
nrOfMessages = 0;
maxMessages = 5;
messagePopUpTime = room_speed * 3;
recievedMessageTimer = -1;
//Initialize the array
for(var i = maxMessages - 1; i &gt; 0; i--)
{
    chatlog[i] = "";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send our stats
statsCounter -= 1 * global.gameSpeed;
if(statsCounter &lt;= 0)
{
    buffer_seek(global.buffer, buffer_seek_start, 0);
    buffer_write(global.buffer, buffer_u8, type.ping);
    buffer_write(global.buffer, buffer_u32, current_time);
    network_send_packet(socket, global.buffer, buffer_tell(global.buffer));
    
    statsCounter = statsTime;
    buffer_seek(global.buffer, buffer_seek_start, 0);
    buffer_write(global.buffer, buffer_u8, type.stats);
    buffer_write(global.buffer, buffer_u32, global.latency);
    buffer_write(global.buffer, buffer_u32, global.kills);
    buffer_write(global.buffer, buffer_u32, global.deaths);
    network_send_packet(socket, global.buffer, buffer_tell(global.buffer));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End the game
if(global.endGame)
{
    endCounter -= 1 * global.gameSpeed;
    if(endCounter &lt;= 0)
    {
        global.endGame = false;
        endCounter = 60 * 10;
        ///Leave the game world
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, type.finishGame);
        buffer_write(global.buffer, buffer_u32, global.playerId);
        network_send_packet(socket, global.buffer, buffer_tell(global.buffer));
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chat
blinkCounter -= 1 * global.gameSpeed;
if(blinkCounter &lt;= 0)
{
    blink = !blink;
    if(global.typing)
    {
        blinkCounter = room_speed * 1;
    }
}
recievedMessageTimer -= 1 * global.gameSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventType = ds_map_find_value(async_load, "type");

switch(eventType)
{
    case network_type_data:
        var buffer = ds_map_find_value(async_load, "buffer");
        var socket = ds_map_find_value(async_load, "id");
        buffer_seek(buffer, buffer_seek_start, 0);
        scr_handlePackets(buffer);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(socket);
buffer_delete(global.buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_valign(fa_middle);
draw_set_halign(fa_left);
draw_set_font(fnt_chat);
var height = window_get_height();
var width = 600 + 40;
var lineBreakWidth = 600 + 30;
if(global.typing)
{
    draw_set_colour(c_black);
    if(string_width(keyboard_string) &gt;= width - 40)
    {
        width = string_width(keyboard_string) + 40;    
    }
    draw_rectangle(10, height - 400, width, height - 100, false);
    draw_set_colour(c_white);
    if(!blink)
    {
        draw_text(20, height - 130, ": " + keyboard_string);
    }
    else
    {
        draw_text(20, height - 130, ": " + keyboard_string + "|");
    }
    
    var lastY = height - 400;
    var thisY = height - 400;
    for(var i = 0; i &lt; nrOfMessages; i++)
    {
        var messageHeight = string_height(chatlog[i]);
        thisY = lastY + messageHeight*2;
        
        draw_text_ext(20, thisY, chatlog[i], font_get_size(fnt_chat) + (font_get_size(fnt_chat)/2), lineBreakWidth);
        lastY = thisY;
    }
}
if(recievedMessageTimer &gt;= 0 &amp;&amp; !global.typing)
{
    draw_set_colour(c_black);
    draw_rectangle(10, height - 400, 400 + 40, height - 100, false);
    draw_set_colour(c_white);
    
    var lastY = height - 400;
    var thisY = height - 400;
    for(var i = 0; i &lt; nrOfMessages; i++)
    {
        var messageHeight = string_height(chatlog[i]);
        thisY = lastY + messageHeight*2;
        
        draw_text_ext(20, thisY, chatlog[i], font_get_size(fnt_chat) + (font_get_size(fnt_chat)/2), lineBreakWidth);
        lastY = thisY;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.typing)
{
    if(text != "")
    {
        //Send the message
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, type.message);
        buffer_write(global.buffer, buffer_u32, global.playerId);
        buffer_write(global.buffer, buffer_string, text);
        network_send_packet(socket, global.buffer, buffer_tell(global.buffer));
        
        global.typing = false;
        scr_log_message(text, global.name);
        text = "";
        keyboard_string = text;
        amountOfCharacters = 0;
    }    
    else
    {
        global.typing = false;
    }
}
else
{
    keyboard_string = text;
    global.typing = true;
    blinkCounter = room_speed * 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.typing)
{
    
    var length = string_length(keyboard_string);
    if(length &lt; maxWidth)
    {   
        text = keyboard_string;
    }
    else
    {
        keyboard_string = text;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
