<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_missile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init vars
//Lists
myDirections = ds_list_create();

//Movement vars
angle = 90;
spd = 0;
maxSpd = 5 * global.simSpeed;
acc = 0.1 * global.simSpeed;

//Calculation vars
dirTime = 4 / global.simSpeed;
dirTimer = 0;
nextDirection = 0;

fitness = 10000;

crashed = false;

finished = false;

pathCreated = false;

path = path_add();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
dirTimer -= 1;
if(dirTimer &lt;= 0)
{
    //Reset timer
    dirTimer = dirTime;
    if(ds_list_size(myDirections) &gt; 0)
    {
        //Check if nextDirection is on the last direction
        if(nextDirection != ds_list_size(myDirections) - 1 &amp;&amp; crashed == false &amp;&amp; finished == false)
        {
        
            //Set direction
            angle = ds_list_find_value(myDirections, nextDirection);
            image_angle = angle;
            nextDirection++;
            /*motion_add(angle, acc);
            spd += acc;*/
        }
    }
}

//Move the missile
if(!crashed &amp;&amp; !finished)
{
    x += lengthdir_x(spd, angle);
    y += lengthdir_y(spd, angle);
}
//Increase speed
if(spd &lt; maxSpd * global.simSpeed)
{
    spd += acc * global.simSpeed;
}
//if(speed &gt;= maxSpd)
else
{
    //spd = maxSpd * global.simSpeed;
    spd = maxSpd;
}

if(x+lengthdir_x(spd, angle) &gt;= room_width || x+lengthdir_x(spd, angle) &lt;= 0 || y+lengthdir_y(spd, angle) &lt;= 0 || y+lengthdir_y(spd, angle) &gt;= room_height)
{
    crashed = true;
}
if(place_meeting(x+lengthdir_x(spd, angle), y+lengthdir_y(spd, angle), obj_solid) || crashed)
{
    var outside = false;
    var foundEdge = false;
    var tempX = x;
    var tempY = y;
    for(var i = spd - 1; i &gt; 0 &amp;&amp; !foundEdge; i--)
    {
        tempX += lengthdir_x(i, angle);
        tempY += lengthdir_y(i, angle);
        if(tempX+lengthdir_x(spd, angle) &gt;= room_width || tempX+lengthdir_x(spd, angle) &lt;= 0 || tempY+lengthdir_y(spd, angle) &lt;= 0 || tempY+lengthdir_y(spd, angle) &gt;= room_height)
        {
            outside = true;
        }
        if(!place_meeting(tempX, tempY, obj_solid) &amp;&amp; !outside)
        {
            x = tempX - 1;
            y = tempY - 1;
            foundEdge = true;
        }
        tempX = x;
        tempY = y;
        outside = false;
    }
    if(!finished)
    {
        crashed = true;
    }
    else
    {
        crashed = false;
    }
}

/*if(crashed || finished)
{
    speed = 0;
}*/



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine fitness
/*var d = distance_to_object(obj_target);
fitness = map(d, 0, room_width, room_width, 0);*/

//If the missile has hit the target set fitness to very good value
if(place_meeting(x, y, obj_target))
{
    finished = true;
}
if(crashed == true)
{
    if(!pathCreated)
    {
        global.crashedMissiles++;
        pathCreated = true;
        //Create path to figure out fitness
        scr_create_path(path, obj_target.x, obj_target.y, 0);
        var d = path_get_length(path);
        fitness = map(d, 0, global.furthestPoint, global.furthestPoint, 0);
        if(fitness &lt; 10)
        {
            fitness = 10;
        }
        if(fitness &gt; global.furthestPoint)
        {
            fitness = 10;
        }
    }
}
if(obj_missile_handler.generationTimer &lt;= 1 &amp;&amp; !crashed)
{
    if(!pathCreated)
    {
        pathCreated = true;
        //Create path to figure out fitness
        scr_create_path(path, obj_target.x, obj_target.y, 0);
        var d = path_get_length(path);
        fitness = d + 600;//map(d, 0, global.furthestPoint, global.furthestPoint, 0);
        if(fitness &lt; 10)
        {
            fitness = 10;
        }
    }
}
/*if(collision_line(x, y, obj_target.x, obj_target.y, obj_solid, 0, 1))
{
    fitness = 10;
}*/
if(finished == true)
{
    global.crashedMissiles++;
    var theTime = obj_missile_handler.generationTimer;
    var timeCompleteMultiplier = map(theTime, 60*(10 / global.simSpeed), 0, 30, 1);
    fitness = global.furthestPoint*8 * timeCompleteMultiplier + 10000;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move if collision with another missile
if(place_meeting(x, y, obj_missile) &amp;&amp; !crashed &amp;&amp; !finished)
{
    var colMis = instance_place(x, y, obj_missile);
    if(x == colMis.x)
    {
        x += 4;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy lists
ds_list_destroy(myDirections);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if(pathCreated)
{
    draw_path(path, x, y, false);
}

//draw_text(x, y + 20, "ID: " + string(id));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
