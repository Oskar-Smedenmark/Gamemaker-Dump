<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init vars
global.crashedMissiles = 0;
randomize();
global.simSpeed = 1; //1 = normal, &gt;1 = faster
//Path
path = path_add();

global.furthestPoint = 0;
for(var i = 0; i &lt; room_width; i += 32)
{
    x = i;
    for(var j = 0; j &lt; room_height; j += 32)
    {
        y = j;
        scr_create_path(path, obj_target.x, obj_target.y, 0);
        if(global.furthestPoint &lt; path_get_length(path))
        {
            global.furthestPoint = path_get_length(path);
        }
        path_end();
    }
}
//Generation vars
generationTime = 15*(30 / global.simSpeed);
generationTimer = generationTime;
currentGeneration = 1;
dirDegrees = 240;
hitPercentage = 0;
crashPercentage = 0;
missPercentage = 0;
mutation = 5; //Chance 0 - 100
mutationChance = mutation;

missedGenerations = 0;

completed = false;
completedGen = -1;

//Missile vars
nrOfMissiles = 100;
missiles = ds_list_create();
newMissiles = ds_list_create();
nrOfDirections = 105;
currDirections = ds_list_create();

//Create missiles
var missile;
for(var i = 0; i &lt; nrOfMissiles; i++)
{
    missile = instance_create(room_width/2, room_height - 100, obj_missile);
    var directions = ds_list_create();
    for(var j = 0; j &lt; nrOfDirections; j++)
    {
        randomDir = random(dirDegrees);
        ds_list_add(directions, randomDir);
    }
    ds_list_add(currDirections, directions);
    ds_list_mark_as_list(currDirections, i);
    ds_list_add(missiles, missile.id);
    init_missile(directions, missile);
    for(var j = ds_list_size(directions); j &gt; 0; j--)
    {
        ds_list_delete(directions, 0);
    }
    ds_list_destroy(directions);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generation code
generationTimer -= 1;
if(generationTimer &lt;= 0 || global.crashedMissiles == nrOfMissiles - 1)
{
    hitPercentage = 0;
    crashPercentage = 0;
    missPercentage = 0;
    generationTimer = generationTime;
    var missile;
    lastGenerationFitness = ds_list_create();
    var maxFit = 0;
    var theFitness;
    for(var i = 0; i &lt; ds_list_size(missiles); i++)
    {
        missile = ds_list_find_value(missiles, i);
        if(missile.finished)
        {
            hitPercentage++;
        }
        if(missile.crashed)
        {
            crashPercentage++;
        }
        if(!missile.crashed &amp;&amp; !missile.finished)
        {
            missPercentage++;
        }
    }
    hitPercentage /= nrOfMissiles;
    crashPercentage /= nrOfMissiles;
    missPercentage /= nrOfMissiles;
    if(hitPercentage &gt; 0.0)
    {
        mutationChance = mutation;
        missedGenerations = 0;
    }
    if(hitPercentage &gt;= 0.9 &amp;&amp; completed == false)
    {
        completed = true;
        completedGen = currentGeneration;
    }
    if(hitPercentage &lt;= 0.0)
    {
        mutationChance += 2;
        if(mutationChance &gt;= 60)
        {
            mutationChance = mutation;
        }
        missedGenerations++;
    }
    /*if(missedGenerations &gt; 30)
    {
        mutationChance = 90;
        missedGenerations = 0;
    }*/
    //Get the highest fitness value
    for(var i = 0; i &lt; ds_list_size(missiles); i++)
    {
        theFitness = ds_list_find_value(missiles, i);
        
        if(theFitness.fitness &gt; maxFit)
        {
            maxFit = theFitness.fitness;
        }
    }
    //Normalize the fitness on each missile between 0 and 1
    for(var i = 0; i &lt; ds_list_size(missiles); i++)
    {
        var currMissile = ds_list_find_value(missiles, i);
        currMissile.fitness /= maxFit;
    }
    
    for(var i = 0; i &lt; ds_list_size(missiles); i++)
    {
        missile = ds_list_find_value(missiles, i);
        
        ds_list_add(lastGenerationFitness, missile.fitness);
    }
    create_generation();
    global.crashedMissiles = 0;
    currentGeneration++;
    for(var i = 0; i &lt; nrOfMissiles; i++)
    {
        missile = ds_list_find_value(missiles, 0);
        with(missile)
        {
            ds_list_destroy(myDirections);
            instance_destroy();
        }
        ds_list_delete(missiles, 0);
    }
    for(var i = 0; i &lt; nrOfMissiles; i++)
    {
        ds_list_add(missiles, ds_list_find_value(newMissiles, 0));
        ds_list_delete(newMissiles, 0);
    }
    ds_list_destroy(lastGenerationFitness);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(missiles);
ds_list_destroy(newMissiles);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text_colour(50, 25, "FPS: " + string(fps_real), c_white, c_white, c_white, c_white, 1);
draw_text_colour(50, 50, "Current Generation: " + string(currentGeneration), c_white, c_white, c_white, c_white, 1);
draw_text_colour(50, 75, "Missed Generations: " + string(missedGenerations), c_white, c_white, c_white, c_white, 1);
draw_text_colour(50, 100, "Last Generation: ", c_white, c_white, c_white, c_white, 1);
draw_text_colour(50, 125, "Hit Percentage: " + string(hitPercentage * 100) + "%", c_white, c_white, c_white, c_white, 1);
draw_text_colour(50, 150, "Crash Percentage: " + string(crashPercentage * 100) + "%", c_white, c_white, c_white, c_white, 1);
draw_text_colour(50, 175, "Miss Percentage: " + string(missPercentage * 100) + "%", c_white, c_white, c_white, c_white, 1);

if(completed == true)
{
    draw_text_colour(350, 50, "Completed Generation: " + string(completedGen), c_white, c_white, c_white, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
