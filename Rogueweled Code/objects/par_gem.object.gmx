<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gem</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
interactable = true;

image_index = irandom(6);
gElement = get_element_with_index(image_index);
gType = Types.blank;
image_xscale *= global.base_scale;
image_yscale *= global.base_scale;
interactableFade = 0.4;

image_speed = 0;
clicked = false;

gridPosX = 0;
gridPosY = 0;
moveSpeed = 0.1;
snapDist = 0.1;
tempX = x;
tempY = y;
xTo = x;
yTo = y;

destroyed = false;
destroyedCounter = room_speed*0.5;
rotDir = random_range(-100,100);
rotSpd = destroyedCounter/3*sign(rotDir) + rotDir;

tempMove = false;

highlight = false;
highlightDEBUG = false;
pulseSpeed = 0.01*global.base_scale;
pulseMinSize = 0.9*global.base_scale;
pulseMaxSize = 1.1*global.base_scale;
xscale = 1*global.base_scale;
yscale = 1*global.base_scale;
rotLength = 20;
highlightRotation = 0;
highlightRotSpd = 0.5;
spawnScale = 0;
spawnScaleInc = 0.05;

value = 1;
matchSize = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message("I was destroyed! ID: " + string(id));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!highlight)
{
    matchSize = 0;
    value = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>value = power(2, matchSize);
if(destroyed){
    destroyedCounter--;
    if(destroyedCounter &lt;= 0)
    {
        destroyed = false;
        destroyedCounter = room_speed*0.5;
        highlight = false;
        var blankGem = create_gem(obj_matrixManager.xStart + obj_matrixManager.offset*gridPosX, obj_matrixManager.yStart + obj_matrixManager.offset*gridPosY, obj_gem_blank, Element.white);
        blankGem.gridPosX = gridPosX;
        blankGem.gridPosY = gridPosY;
        obj_matrixManager.gemGrid[# gridPosX, gridPosY] = blankGem;
        if(global.clickedGem == id)
        {
            global.clickedGem = noone;
        }
        //instance_destroy();
        ds_list_add(obj_matrixManager.discardGemList, id);
        instance_deactivate_object(id);
    }
    image_angle += rotSpd;
    rotSpd = lerp(rotSpd, 0, 0.05);
}
if(!tempMove)
{
    xTo = gridPosX*obj_matrixManager.offset + obj_matrixManager.xStart;
    yTo = gridPosY*obj_matrixManager.offset + obj_matrixManager.yStart;
    
    x = lerp(x, xTo, moveSpeed);
    y = lerp(y, yTo, moveSpeed);
}
else
{
    x = lerp(x, tempX, moveSpeed);
    y = lerp(y, tempY, moveSpeed);
}
if(clicked)
{
    depth = -1000;
    x = mouse_x;
    y = mouse_y;
}
else
{
    depth = 0;
}
if(highlight || highlightDEBUG)
{
    image_angle += highlightRotSpd;
    highlightRotation += highlightRotSpd;
    if(highlightRotation &gt; rotLength || highlightRotation &lt; -rotLength)
    {
        highlightRotSpd *= -1;
    }
    xscale += pulseSpeed;
    yscale += pulseSpeed;
    if(xscale &gt;= pulseMaxSize)
    {
        pulseSpeed *= -1;
    }
    else if(xscale &lt;= pulseMinSize)
    {
        pulseSpeed *= -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!interactable)
{
    image_alpha = interactableFade;
}
else
{
    image_alpha = 1;
}
if(spawnScale &lt; 1)
{
    spawnScale = lerp(spawnScale, 1,spawnScaleInc);
}
else
{
    spawnScale = 1;
}
if(highlight || highlightDEBUG)
{
    sprite_index = spr_gem_highlight;
    image_xscale = xscale*spawnScale;
    image_yscale = yscale*spawnScale;
    //draw_sprite_ext(spr_gem_highlight, gElement, x, y, xscale, yscale, image_angle, c_white, image_alpha);
}
else
{
    image_xscale = 1*global.base_scale*spawnScale;
    image_yscale = 1*global.base_scale*spawnScale;
    sprite_index = spr_gem;
}
/*draw_set_color(c_black);
draw_text(x-32,y-62, "xPos: " + string(gridPosX));
draw_text(x-32,y-50, "yPos: " + string(gridPosY));
draw_text(x-34,y-12, "ID: " + string(id));*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
