<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Matrix grid
if(live_call()) return live_result;
width = 4;
height = 3;
previewRowAmount = 0;
if(height + previewRowAmount &gt; 7)
{
    global.base_scale *= (7/(height+previewRowAmount));
}
else if(width &gt; 20)
{
    global.base_scale *= 20/width;
}
offset = sprite_get_width(spr_backgroundTile)*global.base_scale;
xStart = (room_width/2 - offset*(width/2) + offset/2);
yStart = (room_height - height*offset);

enum Gem{
    type,
    element
}

gemInventory = ds_list_create();
drawGemList = ds_list_create();
discardGemList = ds_list_create();
//nextGemList = ds_list_create();

gemGrid = ds_grid_create(width,height);
nextRows = ds_list_create();
for(var i = 0; i &lt; previewRowAmount; i++)
{
    ds_list_add(nextRows, ds_list_create());
    ds_list_mark_as_list(nextRows, i);
}
for(var i = 0; i &lt; 10; i++)
{
    var objInd = obj_gem_attack;
    
    if( i % 3 == 0)
    {
        objInd = obj_gem_defend;
    }
    
    var createdGem = create_gem(0,0,objInd, get_element_with_index(i % 3));
    ds_list_add(gemInventory, createdGem);
    createdGem.image_alpha = 0;
    instance_deactivate_object(createdGem);
    
    var curGem = create_gem(0,0, createdGem.object_index, get_element_with_index(i % 3));
    ds_list_add(drawGemList, curGem);
}
ds_list_shuffle(drawGemList);
//ds_list_shuffle(nextGemList);

for(var i = 0; i &lt; previewRowAmount; i++)
{
    for(var j = 0; j &lt; width; j++)
    {
        var obj_ind = get_next_gem();
        if(obj_ind == noone)
        {
            for(var n = 0; n &lt; ds_list_size(gemInventory); n++)
            {
                var curGem = gemInventory[| n];
                ds_list_add(drawGemList, curGem);
                instance_activate_object(curGem);
            }
            ds_list_shuffle(drawGemList);
            obj_ind = get_next_gem();
            obj_ind = obj_ind.object_index;
        }
        var nextRowGem = create_gem(xStart + offset*i, yStart + offset*(-1-i), obj_ind, Element.white);
        nextRowGem.gridPosX = j;
        nextRowGem.gridPosY = -1 - i;
        nextRowGem.interactable = false;
        ds_list_add(nextRows[| i], nextRowGem);
    }
}

for(var i = 0; i &lt; width; i++)
{
    for(var j = 0; j &lt; height; j++)
    {
        instance_create(xStart + offset*i, yStart + offset*j, obj_backgroundTile);
        var createdGem = instance_create(xStart + offset*i, yStart + offset*j, obj_gem_blank);
        ds_grid_add(gemGrid, i, j, createdGem);
        createdGem.gridPosX = i;
        createdGem.gridPosY = j;
    }
}

maxSwaps = 2;
swaps = 0;

global.clickedGem = noone;

state = State.move;

spawnGems = true;
destroyed = false;

spawnTime = 0;//room_speed * 0.00125;
spawnCounter = 0;
curSpawnPos = 0;

target = noone;
targetRotSpeed = 0.5;
targetScaleSpeed = 0.005;
targetMaxScale = 1.1;
targetMinScale = 0.9;
targetRot = 0;
targetScale = 1;

totalDamage = 0; //For displaying purposes
totalArmor = 0;
damageTextScale = 0.1;
damageToScale = 0.1;
damageScaleInc = 0.05;

damageTime = room_speed*0;
damageCounter = damageTime;

attackSpeed = 0.075;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enums
enum State
{
    move,
    destroy,
    damage,
    waitForTurn,
    pause
}
enum Element
{
    white = c_white,
    red = c_red,
    green = c_green,
    blue = c_blue,
    purple = c_purple,
    yellow = c_yellow,
    cyan = c_teal
}
enum Types
{
    blank,
    attack,
    defend
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// function calls

gem_update_highlight();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(spawnGems &amp;&amp; state != State.pause)
{
    spawnCounter--;
    if(spawnCounter &lt;= 0)
    {
        spawnCounter = spawnTime;
        var allSpawned = spawn_gems();
        if(allSpawned)
        {
            if(ds_list_size(discardGemList) &gt; 0)
            {
                ds_list_copy(drawGemList, discardGemList);
                ds_list_shuffle(drawGemList);
                allSpawned = false;
                ds_list_clear(discardGemList);
            }
        }
        if(!instance_exists(obj_gem_blank) || allSpawned)
        {
            spawnGems = false;
            destroyed = false;
            gem_update_highlight();
            
        }
        make_gems_fall();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state)
{
    case State.move:
        state_move();
    break;
        
    case State.destroy:
        state_destroy();
    break;
    
    case State.damage:
        state_damage();
    break;
    
    case State.waitForTurn:
        if(obj_hero.myTurn)
        {
            change_state(State.move);
        }
    break;
    
    case State.pause:
        if(keyboard_check_pressed(vk_space))
        {
            change_state(State.destroy);
        }
    break;
}

if(target != noone)
{
    if(instance_exists(target))
    {
        targetScale += targetScaleSpeed;
        if(targetScale &gt;= targetMaxScale || targetScale &lt;= targetMinScale)
        {
            targetScaleSpeed *= -1;
        }
        targetRot += targetRotSpeed;
    }
}

damageToScale = 0.1*(totalDamage/3);
damageTextScale = lerp(damageTextScale,damageToScale,damageScaleInc);
damageTextScale = clamp(damageTextScale, 0.2, 999);
if(damageToScale == 0)
{
    damageTextScale = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_damage);
draw_set_color(c_white);
draw_text_transformed(room_width/2, room_height/4, string(totalDamage), damageTextScale, damageTextScale, 0);
draw_debug_text(50, 50, "ClickedGem = " + string(global.clickedGem), fnt_normal, fa_left ,c_white);
draw_debug_text(50, 100, "Amount of Gems: " + string(instance_number(par_gem)), fnt_normal, fa_left ,c_white);
draw_set_font(fnt_normal);
draw_text(100, 150, "Swaps: " + string(maxSwaps-swaps));
draw_debug_text(50, 200, "Mouse grid pos and room pos: (" + string(x_to_gridX(mouse_x)) + "," + string(y_to_gridY(mouse_y)) + ")", fnt_normal, fa_left ,c_white);
draw_text(100, 250, "Damage: " + string(totalDamage));
draw_debug_text(50, 300, "Current State: " + string(state), fnt_normal, fa_left ,c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(live_call()) return live_result;
/*draw_set_color(c_white);
var gridBoxWidth = 128;
var gridBoxStartX = 100;
var gridBoxStartY = 350;
for(var i = 0; i &lt; width; i++)
{
    for(var j = 0; j &lt; height; j++)
    {
        draw_rectangle(gridBoxStartX + gridBoxWidth*i, gridBoxStartY + gridBoxWidth*j, gridBoxStartX + gridBoxWidth*i + gridBoxWidth, gridBoxStartY + gridBoxWidth*j + gridBoxWidth, true);
        draw_text(gridBoxStartX + gridBoxWidth*i + gridBoxWidth/3, gridBoxStartY + gridBoxWidth*j + gridBoxWidth/2, gemGrid[# i, j]);
    }
}*/
if(target != noone)
{
    if(instance_exists(target))
    {
        draw_sprite_ext(spr_target, 0, target.x, target.y, global.base_scale*targetScale, global.base_scale*targetScale, targetRot, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
