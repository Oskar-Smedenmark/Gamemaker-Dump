<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define and intialize server
var networkType = network_socket_tcp;
var port = 46887;
var maxPlayers = 32;
var bufferSize = 1024;
var bufferType = buffer_fixed;
var bufferAlignment = 1;

server = network_create_server(networkType, port, maxPlayers);
global.buffer = buffer_create(bufferSize, bufferType, bufferAlignment);

global.players = ds_list_create();
playerIdCounter = 0;

scr_create_message("Server is up!");

enum type
{
    ping,
    join,
    connect,
    disconnect,
    playerCreateErase,
    playerOrientation,
    shooting,
    hit,
    dead,
    spawn,
    stats,
    winner,
    spawnProtection,
    finishGame,
    lobbyList,
    changeTeam,
    onFinish,
    onCheckpoint,
    disableEnableWeapons,
    startTimer,
    posInitiation,
    playerPosUpdate,
    playerCreate,
    message
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Other Variables
global.weaponsDisabled = false;
global.killsToWinFFA = 10;
global.killsToWinTD = 10;
gameStarted = false;
gameStartCounter = 60 * 3.99;
gameWaitTimer = 60 * 30;
playerGoneTimer = 60 * 3.99;
if(global.gamemode != "race")
{
    currentMap = "Arena1";
}
else
{
    currentMap = "Race_arena_1";
}
global.nextMap = currentMap;
global.mapSize = 3200;

//Race
global.lapsToWin = 3;
playerHasFinished = false;
winningPlayer = noone;
global.racingPlayers = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if game has started
var amountOfPlayersInGame = 0;
for(var i = 0; i &lt; ds_list_size(global.racingPlayers); i++)
{
    var player = ds_list_find_value(global.racingPlayers, i);
    if(player.playerInGame)
    {
        amountOfPlayersInGame++;
    }
}
if(amountOfPlayersInGame &gt;= 1)
{
    gameWaitTimer--;
    if(ds_list_size(global.players) == amountOfPlayersInGame || gameWaitTimer &lt;= 0)
    {
        gameStartCounter--;
        if(gameStartCounter &lt;= 0)
        {
            gameStarted = true;
        }
    }
}
else
{
    currentMap = global.nextMap;
    gameStarted = false;
    gameStartCounter = 60 * 4;
    if(amountOfPlayersInGame &lt;= 0)
    {
        gameWaitTimer = 60 * 30;
    }
}
if(floor(gameStartCounter) == 0 || !gameStarted)
{
    //Tell users
    for(var i = 0; i &lt; ds_list_size(global.players); i++)
    {
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, type.startTimer);
        buffer_write(global.buffer, buffer_u32, gameStartCounter);
        network_send_packet(ds_list_find_value(global.players, i), global.buffer, buffer_tell(global.buffer));
    }
}
if(ds_list_size(global.players) &lt;= 0)
{
    currentMap = global.nextMap;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if anyone has won
if(global.gamemode = "ffa")
{
    with(obj_player)
    {
        if(playerKills &gt;= global.killsToWinFFA)
        {
            currentMap = global.nextMap;
            global.gameStarted = false;
            for(var i = 0; i &lt; ds_list_size(global.players); i++)
            {
                var storedPlayerSocket = ds_list_find_value(global.players, i);
                
                buffer_seek(global.buffer, buffer_seek_start, 0);
                buffer_write(global.buffer, buffer_u8, type.winner);
                buffer_write(global.buffer, buffer_string, playerName);
                buffer_write(global.buffer, buffer_string, currentMap);
                network_send_packet(storedPlayerSocket, global.buffer, buffer_tell(global.buffer));
            }
        }
    }
}
if(global.gamemode = "td")
{
    var blueTeamKills = 0;
    var redTeamKills = 0;
    with(obj_player)
    {
        if(playerTeam == "Blue")
        {
            blueTeamKills += playerKills;
        }
        if(playerTeam == "Red")
        {
            redTeamKills += playerKills;
        }
    }
    if(blueTeamKills &gt;= global.killsToWinTD)
    {
        global.gameStarted = false;
        obj_controller.currentMap = global.nextMap;
        for(var i = 0; i &lt; ds_list_size(global.players); i++)
        {
            var storedPlayerSocket = ds_list_find_value(global.players, i);
            
            buffer_seek(global.buffer, buffer_seek_start, 0);
            buffer_write(global.buffer, buffer_u8, type.winner);
            buffer_write(global.buffer, buffer_string, "Blue");
            buffer_write(global.buffer, buffer_string, obj_controller.currentMap);
            network_send_packet(storedPlayerSocket, global.buffer, buffer_tell(global.buffer));
        }
    }
    if(redTeamKills &gt;= global.killsToWinTD)
    {
        global.gameStarted = false;
        obj_controller.currentMap = global.nextMap;
        for(var i = 0; i &lt; ds_list_size(global.players); i++)
        {
            var storedPlayerSocket = ds_list_find_value(global.players, i);
            
            buffer_seek(global.buffer, buffer_seek_start, 0);
            buffer_write(global.buffer, buffer_u8, type.winner);
            buffer_write(global.buffer, buffer_string, "Red");
            buffer_write(global.buffer, buffer_string, obj_controller.currentMap);
            network_send_packet(storedPlayerSocket, global.buffer, buffer_tell(global.buffer));
        }
    }
}

if(global.gamemode = "race")
{
    with(obj_player)
    {
        if(obj_controller.winningPlayer == id)
        {
            obj_controller.currentMap = global.nextMap;
            global.gameStarted = false;
            gameStartCounter = 60 * 4;
            gameWaitTimer = 60 * 30;
            for(var i = 0; i &lt; ds_list_size(global.players); i++)
            {
                var storedPlayerSocket = ds_list_find_value(global.players, i);
                
                buffer_seek(global.buffer, buffer_seek_start, 0);
                buffer_write(global.buffer, buffer_u8, type.winner);
                buffer_write(global.buffer, buffer_string, playerName);
                buffer_write(global.buffer, buffer_string, obj_controller.currentMap);
                network_send_packet(storedPlayerSocket, global.buffer, buffer_tell(global.buffer));
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate position
/*for(var i = 0; i &lt; ds_list_size(global.racingPlayers); i++)
{
    var currentRacer = ds_list_find_value(global.racingPlayers, i);
    var nextPos = i + 1;
    var nextRacer = ds_list_find_value(global.racingPlayers, nextPos);
    var temp = noone;
    while(currentRacer.playerLap &gt;= nextRacer.playerLap)
    {
        temp = nextRacer;
        if(currentRacer.playerLap == nextRacer.playerLap)
        {
            if(currentRacer.playerCheckpoint == true &amp;&amp; nextRacer.playerCheckpoint == false)
            {
                ds_list_delete(global.racingPlayers, nextPos);
                ds_list_insert(global.racingPlayers, nextPos - 1, temp);
            }
            else
            {
                break;
            }
        }
        ds_list_delete(global.racingPlayers, nextPos);
        ds_list_insert(global.racingPlayers, nextPos - 1, temp);
        temp = noone;
        nextPos++;
        if(nextPos &lt; ds_list_size(global.racingPlayers))
        {
            nextRacer = ds_list_find_value(global.racingPlayers, i + nextPos);
        }
        else
        {
            break;
        }
    }
    currentRacer.playerPos = ds_list_find_index(global.racingPlayers, currentRacer);
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make sure everyone is on the map
playerGoneTimer--;
if(playerGoneTimer &lt;= 0)
{
    playerGoneTimer = 60 * 3.99;
    for(var i = 0; i &lt; ds_list_size(global.players); i++)
    {
        var storedPlayerSocket = ds_list_find_value(global.players, i);
        var player = noone;
        for(var j = 0; j &lt; ds_list_size(global.racingPlayers); j++)
        {
            player = ds_list_find_value(global.racingPlayers, j);
            if(player.playerInGame)
            {
                buffer_seek(global.buffer, buffer_seek_start, 0);
                buffer_write(global.buffer, buffer_u8, type.playerCreate);
                buffer_write(global.buffer, buffer_u32, player.playerId);
                buffer_write(global.buffer, buffer_string, player.playerName);
                buffer_write(global.buffer, buffer_string, player.playerTeam);
                buffer_write(global.buffer, buffer_string, player.playerCharacter);
                network_send_packet(storedPlayerSocket, global.buffer, buffer_tell(global.buffer));
            }
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventType = ds_map_find_value(async_load, "type");

switch(eventType)
{
    case network_type_connect: 
        var socket = ds_map_find_value(async_load, "socket");
        ds_list_add(global.players, socket);
        
        playerIdCounter++;
        
        //Create the player
        if(ds_list_size(global.players) == 1)
        {
            with(instance_create(0, 0, obj_player))
            {
                playerId = obj_controller.playerIdCounter;
                playerName = "";
                playerInGame = false;
                playerSocket = socket;
                playerLatency = 0;
                playerKills = 0;
                playerDeaths = 0;
                playerHost = true;
                ds_list_add(global.racingPlayers, id);
            }
        }
        else
        {
            with(instance_create(0, 0, obj_player))
            {
                playerId = obj_controller.playerIdCounter;
                playerName = "";
                playerInGame = false;
                playerSocket = socket;
                playerLatency = 0;
                playerKills = 0;
                playerDeaths = 0;
                playerHost = false;
                
                ds_list_add(global.racingPlayers, id);
            }
        }
        //send player id
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, type.connect);
        buffer_write(global.buffer, buffer_u32, playerIdCounter);
        buffer_write(global.buffer, buffer_string, global.gamemode);
        buffer_write(global.buffer, buffer_string, currentMap);
        buffer_write(global.buffer, buffer_u32, global.mapSize);
        buffer_write(global.buffer, buffer_bool, global.weaponsDisabled);
        network_send_packet(socket, global.buffer, buffer_tell(global.buffer));
        scr_create_message("A new player has connected!");
    break;

    case network_type_disconnect:
        var socket = ds_map_find_value(async_load, "socket");
        var index = ds_list_find_index(global.players, socket);
        
        if(index != -1)
        {
            ds_list_delete(global.players, index);
            ds_list_delete(global.racingPlayers, index);
        }
        
        //Get some info
        var playerLeavingId = 0;
        
        with(obj_player)
        {   
            if(playerSocket == socket)
            {
                playerLeavingId = playerId;
            }
        }
        
        //Notify all players
        for(var i = 0; i &lt; ds_list_size(global.players); i++)
        {
            var storedPlayerSocket = ds_list_find_value(global.players, i);
            
            buffer_seek(global.buffer, buffer_seek_start, 0);
            buffer_write(global.buffer, buffer_u8, type.disconnect);
            buffer_write(global.buffer, buffer_u32, playerLeavingId);
            network_send_packet(storedPlayerSocket, global.buffer, buffer_tell(global.buffer));
        }
        
        with(obj_player)
        {   
            if(playerId == playerLeavingId)
            {
                instance_destroy();
            }
        }
        
        scr_create_message("A player has left!");
    break;
    
    case network_type_data:
        var buffer = ds_map_find_value(async_load, "buffer");
        var socket = ds_map_find_value(async_load, "id");
        buffer_seek(buffer, buffer_seek_start, 0);
        scr_handlePackets(buffer, socket);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(server);
buffer_delete(global.buffer);
ds_list_destroy(global.players);
ds_list_destroy(global.racingPlayers);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
draw_set_font(fnt_normal);
draw_text(5, 5, "Server status: " + string(server &gt;= 0));
draw_text(5, 25, "Total clients: " + string(ds_list_size(global.players)));
draw_text(5, 45, "Current Map: " + string(currentMap));
draw_text(5, 65, "Next Map: " + string(global.nextMap));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
